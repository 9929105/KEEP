// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'vendor/underscore', 'vendor/backbone-min', 'masonry'], function($, _, Backbone, Masonry) {
  var RawView;
  RawView = (function(_super) {

    __extends(RawView, _super);

    function RawView() {
      return RawView.__super__.constructor.apply(this, arguments);
    }

    RawView.prototype.name = 'RawView';

    RawView.prototype.el = $('#raw');

    RawView.prototype.column_headers = [
      {
        'name': 'uuid',
        'type': 'text'
      }
    ];

    RawView.prototype._detect_headers = function(root) {
      var field, _i, _len, _ref, _ref1, _results;
      _results = [];
      for (_i = 0, _len = root.length; _i < _len; _i++) {
        field = root[_i];
        if ((_ref = field.type) === 'group') {
          this._detect_types(field.children);
        }
        if ((_ref1 = field.type) !== 'note') {
          _results.push(this.column_headers.push(field));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    RawView.prototype.initialize = function(options) {
      this.parent = options.parent;
      this.form = options.form;
      this.data = options.data;
      this._detect_headers(this.form.attributes.children);
      return this.render();
    };

    RawView.prototype.render = function() {
      var datum, field, headers, html, media_html, oTable, url, value, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      $('#raw').html('');
      media_html = "<div id='media-container'>";
      html = '<table id="raw_table" class="table table-striped table-bordered">';
      html += '<thead><tr>';
      headers = '';
      _ref = this.column_headers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        html += "<th>" + field.name + "</th>";
      }
      html += '</tr></thead>';
      html += '<tbody>';
      _ref1 = this.data.models;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        datum = _ref1[_j];
        html += '<tr>';
        _ref2 = this.column_headers;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          field = _ref2[_k];
          value = datum.get('data')[field.name];
          if (value) {
            if ((_ref3 = field.type) === 'photo') {
              url = "//s3.amazonaws.com/keep-media/" + (datum.get('repo')) + "/" + (datum.get('_id')) + "/" + value;
              html += "<td><a href='" + url + "'>" + value + "</a></td>";
            } else {
              html += "<td>" + value + "</td>";
            }
          } else {
            html += "<td>N/A</td>";
          }
        }
        html += '</tr>';
      }
      html += '</tbody></table>';
      html += media_html + "</div>";
      $('#raw').html(html);
      oTable = $('#raw_table').dataTable({
        'sDom': "<'row'<'span6'l><'span6'f>r>t<'row'<'span6'i><'span6'p>>",
        'sPaginationType': 'bootstrap',
        'bLengthChange': false,
        'bFilter': false
      });
      $.extend($.fn.dataTableExt.oStdClasses, {
        "sWrapper": "dataTables_wrapper form-inline"
      });
      new FixedColumns(oTable);
      return this;
    };

    return RawView;

  })(Backbone.View);
  return RawView;
});
