// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$(function() {
  var App, getForm, item_dict, mobileView, swipeFrame, xFormModel, xFormView, _data, _fieldsets, _schema;
  mobileView = false;
  getForm = null;
  _fieldsets = [];
  _schema = {};
  _data = {};
  item_dict = {};
  swipeFrame = null;
  xFormModel = (function(_super) {

    __extends(xFormModel, _super);

    function xFormModel() {
      return xFormModel.__super__.constructor.apply(this, arguments);
    }

    xFormModel.prototype.defaults = {
      id: null,
      children: []
    };

    return xFormModel;

  })(Backbone.Model);
  xFormView = (function(_super) {

    __extends(xFormView, _super);

    function xFormView() {
      return xFormView.__super__.constructor.apply(this, arguments);
    }

    xFormView.prototype.el = $('#xform_view');

    xFormView.prototype.model = new xFormModel();

    xFormView.prototype.initialize = function() {
      this.listenTo(this.model, 'change', this.render);
      this.model.fetch({
        url: "/api/v1/forms/50ca6a9ca14cd282229139fa/?user=admin&key=c308c86bd454486273a603b573de4342&format=json"
      });
      return this;
    };

    xFormView.prototype.render = function() {
      if (mobileView) {
        this.loadMobileForm();
      } else {
        this.loadForm();
      }
      return this;
    };

    xFormView.prototype.recursiveAdd = function(child) {
      var option_array, schema_dict, _ref, _ref1,
        _this = this;
      schema_dict = {};
      schema_dict['help'] = child.hint;
      schema_dict['title'] = child.label;
      if (_fieldsets.length === 0 && mobileView) {
        schema_dict['template'] = 'firstField';
      }
      if ((_ref = child.type) === 'string' || _ref === 'text') {
        schema_dict['type'] = 'Text';
      } else if ((_ref1 = child.type) === 'int' || _ref1 === 'integer') {
        schema_dict['type'] = 'Number';
      } else if (child.type === 'decimal') {
        schema_dict['type'] = 'Number';
      } else if (child.type === 'date') {
        schema_dict['type'] = 'Date';
      } else if (child.type === 'today') {
        schema_dict['type'] = 'Date';
        schema_dict['title'] = 'Today';
      } else if (child.type === 'time') {
        schema_dict['type'] = 'DateTime';
      } else if (child.type === 'trigger') {
        schema_dict['type'] = 'Checkbox';
      } else if (child.type === 'note') {
        schema_dict['type'] = 'Text';
        schema_dict['template'] = 'noteField';
      } else if (child.type === 'datetime') {
        schema_dict['type'] = 'DateTime';
      } else if (child.type === 'select all that apply') {
        schema_dict['type'] = 'Checkboxes';
        option_array = [];
        _.each(child.choices, function(option) {
          return option_array.push({
            val: option.name,
            label: option.label
          });
        });
        schema_dict['options'] = option_array;
      } else if (child.type === 'group') {
        schema_dict['type'] = 'Text';
        schema_dict['template'] = 'groupBegin';
        _.each(child.children, function(_child) {
          return _this.recursiveAdd(_child);
        });
        schema_dict = {};
        schema_dict['type'] = 'Text';
        schema_dict['help'] = child.hint;
        schema_dict['title'] = child.label;
        schema_dict['template'] = 'groupEnd';
        item_dict[child.name + '-end'] = schema_dict;
        _fieldsets.push(child.name + '-end');
        return this;
      } else if (child.type === 'select one') {
        schema_dict['type'] = 'Select';
        option_array = [];
        _.each(child.choices, function(option) {
          return option_array.push({
            val: option.name,
            label: option.label
          });
        });
        schema_dict['options'] = option_array;
      } else {
        schema_dict['type'] = 'Text';
        schema_dict['template'] = 'unsupportedField';
      }
      item_dict[child.name] = schema_dict;
      _fieldsets.push(child.name);
      _data[child.name] = child["default"];
      return this;
    };

    xFormView.prototype.loadMobileForm = function() {
      var _this = this;
      _fieldsets = [];
      _schema = {};
      _data = {};
      item_dict = {};
      swipeFrame = null;
      $(document).bind('touchmove', function(e) {
        return e.preventDefault();
      });
      Backbone.Form.setTemplates({
        fieldset: '<ul>{{fields}}</ul',
        customForm: '<div id="slider2" class="swipe">{{fieldsets}}</div>',
        field: '<li style="display:none;"><label for="{{id}}">{{title}}</label><div>{{editor}}</div><div>{{help}}</div></li>',
        unsupportedField: '<li style="display:none;"><label for="{{id}}">{{title}}</label></li>',
        firstField: '<li style="display:block;"><label for="{{id}}">{{title}}</label><div>{{editor}}</div><div>{{help}}</div></li>',
        noteField: '<li style="display:none;"><label class="control-label" for="{{id}}">{{title}}</label></div></li>',
        groupBegin: '<li style="display:none;"><div class="well"><div><strong>Group: </strong>{{title}}</div></div></li>',
        groupEnd: '<li style="display:none;"><div><strong>Group End: </strong>{{title}}<hr></div></li>'
      });
      _.each(this.model.attributes.children, function(child) {
        return _this.recursiveAdd(child);
      });
      getForm = new Backbone.Form({
        template: 'customForm',
        schema: item_dict,
        data: _data,
        fields: _fieldsets
      });
      getForm.render();
      $('#formDiv').html("");
      $('#formDiv').html(getForm.el);
      swipeFrame = new Swipe(document.getElementById('slider2'));
      console.log(swipeFrame);
      return this;
    };

    xFormView.prototype.loadForm = function() {
      var _this = this;
      _fieldsets = [];
      _schema = {};
      _data = {};
      item_dict = {};
      swipeFrame = null;
      Backbone.Form.setTemplates({
        unsupportedField: '<div><label for="{{id}}"><strong>Unsupported:</strong> {{title}}</label></div>',
        noteField: '<div><strong>Note: </strong>{{title}}</div>',
        groupBegin: '<div class="well"><div><strong>Group: </strong>{{title}}</div></div>',
        groupEnd: '<div><hr></div>'
      });
      _.each(this.model.attributes.children, function(child) {
        return _this.recursiveAdd(child);
      });
      getForm = new Backbone.Form({
        schema: item_dict,
        data: _data,
        fields: _fieldsets
      }).render();
      $('#formDiv').html("");
      $('#formDiv').html(getForm.el);
      return this;
    };

    return xFormView;

  })(Backbone.View);
  return App = new xFormView();
});
